security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
#        users_in_memory: { memory: null }
        app_candidat_provider:
            entity:
                class: App\Entity\Candidat
                property: email
        app_recruteur_provider:
            entity:
                class: App\Entity\Recruteur
                property: email
        app_user_provider:
            chain:
                providers: [app_candidat_provider, app_recruteur_provider]
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        utilisateur:
#            user_checker: App\Security\RecruteurChecker
            lazy: true
            provider: app_user_provider
            logout:
                path: deconnexion
                # where to redirect after logout
                # target: app_any_route
                # where to redirect after logout
                # target: app_any_route

            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
                path: /
                always_remember_me: true

            form_login:
                login_path: connexion
                check_path: connexion
                enable_csrf: true
                username_parameter: email
                default_target_path: connexion

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true


    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
#        - { path: ^/admin, roles: ROLE_ADMIN }
#        - { path: ^/profile, roles: ROLE_USER }
#        - { path: ^/inscription-candidat, roles: PUBLIC_ACCESS }
        - { path: ^/entreprise/*, roles: ROLE_RECRUTEUR }
        - { path: ^/candidat/*, roles: ROLE_CANDIDAT }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
